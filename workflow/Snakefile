from prep_inputs import *
from utils import *
#from functions import *
import random
from pathlib import Path
import json

# top_dir = Path(config['top_dir'])
# working_dir = top_dir / config['cohort_name'] / f"{config['sample_name']}_{config['genome_version']}" 

workdir: working_dir # <----- working directory is specified by prep_inputs.py; it is the cohort directory
#print(f'working directory ---- {working_dir}')

report: "report/workflow.rst" # <----- write report

rule all:
    input:
        # ---- step-1 output:
        expand('{sample_name}/references/{sample_name}.barcode_map.txt', sample_name = sample_names),
        get_step1_sc_bams(sample_names, sample_barcode_maps),
        # ---- step-2 output:
        get_step2_filter_added_mutect2_vcfs(sample_names, sample_barcode_maps),
        # #get_step2_strelka2_vcfs(sample_names, sample_barcode_maps),
        # # ---- step-3 output:
        # expand("{sample_name}/3-bcf_filter/combined_vcf/{sample_name}-combined_VCF_filter_v3.prev_filtered.vcf.gz", sample_name = sample_names),
        # # ---- step-4 output:
        # expand("{sample_name}/4-bcf_genotyping/combined_vcf/{sample_name}-combined_VCF.filtered.vcf.gz.stats", sample_name = sample_names)
        # ---- step-5_output:
        expand("{sample_name}/4-bcf_genotyping/combined_vcf/{sample_name}-combined_VCF.filtered.vcf.gz", sample_name = sample_names),
        # ---- step-6 output:
        #expand("{sample_name}/OUTPUTS_from_mpileup/{sample_name}_DNA_CNV.h5", sample_name = sample_names)

include: "rules/1-split_sc_bams.smk"
include: "rules/2-single-cell_mutect2_call.smk"
include: "rules/3-filter_and_merge_sc_var_call.smk"
include: "rules/4-single-cell_genotying.smk"
# include: "rules/5-filter_and_combine_sc_m2_f_vcfs.smk"
# include: "rules/6-generate_outputs.smk"
